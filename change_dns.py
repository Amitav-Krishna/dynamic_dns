import os
import base64
import time
import requests
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait 
from selenium.webdriver.support import expected_conditions as EC
from dotenv import load_dotenv

load_dotenv()

HOVER_USERNAME = os.getenv("HOVER_USERNAME")
HOVER_PASSWORD = os.getenv("HOVER_PASSWORD")
DOMAIN_NAME = "your_domain.com"
RECORD_NAME = "@"  # Use "@" for root domain or specify subdomains like "www" # Gmail credentials GMAIL_API_SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'] GMAIL_CREDENTIALS_PATH = 'credentials.json'  # Path to your credentials.json file GMAIL_VERIFICATION_SUBJECT = "Your Hover verification code" # Function to get the public IP address def get_public_ip():     response = requests.get("https://ifconfig.co/ip")     response.raise_for_status()     return response.text.strip() # Function to authenticate with Gmail and retrieve the verification code def get_verification_code_from_gmail():     """Authenticate with Gmail API and fetch the latest verification email."""     creds = None     if os.path.exists('token.json'):         creds = Credentials.from_authorized_user_file('token.json', GMAIL_API_SCOPES)          if not creds or not creds.valid:         if creds and creds.expired and creds.refresh_token:             creds.refresh(Request())         else:             flow = InstalledAppFlow.from_client_secrets_file(GMAIL_CREDENTIALS_PATH, GMAIL_API_SCOPES)             creds = flow.run_local_server(port=0)         with open('token.json', 'w') as token:             token.write(creds.to_json())          try:         service = build('gmail', 'v1', credentials=creds)         results = service.users().messages().list(userId='me', q=GMAIL_VERIFICATION_SUBJECT).execute()         messages = results.get('messages', [])         if not messages:             raise Exception("No verification email found.")                  message = service.users().messages().get(userId='me', id=messages[0]['id']).execute()         payload = message['payload']         headers = payload['headers']         for header in headers:             if header['name'] == 'Subject' and GMAIL_VERIFICATION_SUBJECT in header['value']:                 body = payload['body']                 if 'data' in body:                     email_body = base64.urlsafe_b64decode(body['data']).decode('utf-8')                     # Assuming the verification code is a 6-digit number, adjust the regex as needed                     verification_code = ''.join(filter(str.isdigit, email_body))                     if verification_code:                         return verification_code                 else:                     raise Exception("No body found in the email.")     except HttpError as error:         print(f"An error occurred: {error}")         raise     except Exception as e:         print(f"Error: {e}")         raise # Set up Selenium driver (replace 'chromedriver_path' with the actual path) service = Service("chromedriver_path")  # Replace with the path to your ChromeDriver driver = webdriver.Chrome(service=service) try:     # Step 1: Log into Hover     driver.get("https://www.hover.com/signin")     WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "username"))).send_keys(HOVER_USERNAME)     driver.find_element(By.ID, "password").send_keys(HOVER_PASSWORD + Keys.RETURN)     print("Logged into Hover. Waiting for verification email.")     # Step 2: Retrieve the verification code from Gmail     verification_code = get_verification_code_from_gmail()     print(f"Verification code retrieved: {verification_code}")     # Step 3: Enter the verification code in Hover     driver.switch_to.window(driver.window_handles[0])     WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "verification-code"))).send_keys(         verification_code + Keys.RETURN     )     print("Verification code entered. Proceeding to dashboard.")     # Step 4: Extract hoverauth cookie     WebDriverWait(driver, 20).until(         EC.presence_of_element_located((By.ID, "dashboard"))  # Adjust to Hover's dashboard element     )     cookies = driver.get_cookies()     hoverauth_cookie = next((cookie for cookie in cookies if cookie["name"] == "hoverauth"), None)     if not hoverauth_cookie:         raise Exception("Hoverauth cookie not found. Check if login was successful.")     print("Hoverauth cookie retrieved:", hoverauth_cookie["value"])     # Step 5: Use hoverauth cookie for API calls     session = requests.Session()     session.cookies.set("hoverauth", hoverauth_cookie["value"])     # Fetch current DNS records     dns_url = "https://www.hover.com/api/dns"     response = session.get(dns_url)     if not response.ok:         raise Exception(f"Failed to fetch DNS records: {response.status_code} {response.text}")     dns_records = response.json()     print("Current DNS Records:", dns_records)     # Find the record to update     record_id = None     for record in dns_records["domains"]:         if record["domain"] == DOMAIN_NAME:             for entry in record["entries"]:                 if entry["name"] == RECORD_NAME:                     record_id = entry["id"]                     break     if not record_id:         raise Exception(f"DNS record for {RECORD_NAME}.{DOMAIN_NAME} not found.")     # Fetch the public IP address     public_ip = get_public_ip()     print(f"Public IP Address: {public_ip}")     # Update the DNS record     update_url = f"https://www.hover.com/api/dns/{record_id}"     update_data = {"content": public_ip}     update_response = session.put(update_url, json=update_data)     if update_response.ok:         print(f"DNS record for {RECORD_NAME}.{DOMAIN_NAME} updated to {public_ip}")     else:         raise Exception(f"Failed to update DNS record: {update_response.status_code} {update_response.text}") except Exception as e:     print("An error occurred:", str(e)) finally:     # Clean up and close the browser     driver.quit() 
